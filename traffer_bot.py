import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = '7346873674:AAHAJgAh1ZBbogGUzBnwhqJFJ6WI6hEtV8I'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class CalcStates(StatesGroup):
    waiting_for_cost = State()


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∞
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n\n–Ø –±–æ—Ç-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ç—Ä–∞—Ñ—Ñ–µ—Ä–æ–≤.", reply_markup=user_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Å—á–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"
@dp.message(lambda message: message.text == '–ü–æ–¥—Å—á–µ—Ç –∑–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ üßÆ')
async def ask_for_cost(message: types.Message, state: FSMContext):

    await bot.send_chat_action(message.from_user.id, action="typing")
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞:", reply_markup=cancel_inline())
    await state.set_state(CalcStates.waiting_for_cost)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
@dp.message(CalcStates.waiting_for_cost)
async def calculate_costs(message: types.Message, state: FSMContext):
    try:
        cost = float(message.text)
        counts = [10, 100, 500, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 10000, 20000, 30000, 40000, 50000]
        response = "–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n\n"
        for count in counts:
            response += f"{count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {cost * count}$.\n"
        await message.answer(response, reply_markup=user_menu)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—á–∏—Å–ª–æ).")
    finally:
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
@dp.callback_query(lambda c: c.data == 'cancel')
async def cancel(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.answer(text="", show_alert=True)
    await callback_query.message.delete()
    await callback_query.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=user_menu)


# inline
def cancel_inline():
    inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
    )
    return inline_keyboard


user_menu = types.ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [types.KeyboardButton(text="–ü–æ–¥—Å—á–µ—Ç –∑–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ üßÆ")],
    ]
)


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
