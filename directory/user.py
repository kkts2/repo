import asyncio
import logging
import random
import string

from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import database as db
from config import CHANNEL_ID, ERC20_WALLET, BEP20_WALLET, TRON_WALLET, ADMIN_USER_ID, user_menu, channels, \
    soft_menu, \
    not_sub

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
user_router = Router()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
class TopupStates(StatesGroup):
    waiting_for_amount = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –æ—Ä–¥–µ—Ä–∞
def generate_order_id():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
async def check_sub_channels(channels, user_id, bot: Bot):
    for channel in channels:
        channel_id = channel[1]
        try:
            chat_member = await bot.get_chat_member(channel_id, user_id)
            if chat_member.status == 'left':
                return False
        except Exception as e:
            await bot.send_message(CHANNEL_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}.")
            return False
    return True


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ, –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É
@user_router.callback_query(lambda c: c.data == 'check_sub_channels_repeat')
async def check_sub_channels_repeat(callback_query: types.CallbackQuery, bot: Bot):

    if await check_sub_channels(channels, callback_query.from_user.id, bot):

        await callback_query.answer(text="", show_alert=True)
        await bot.send_message(callback_query.from_user.id, text="‚úÖ <b>–û–¥–æ–±—Ä–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b> –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏ —Å–ª–µ–¥–∏ –∑–∞ –∫–∞–Ω–∞–ª–æ–º, —Ç–∞–º –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!", parse_mode="html")
        await callback_query.message.delete()
        await bot.send_message(callback_query.from_user.id, '–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª:', reply_markup=user_menu)
    else:

        await callback_query.answer(text="", show_alert=True)
        await bot.send_message(callback_query.from_user.id, text="‚ùóÔ∏è<b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!</b> –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!", parse_mode="html", reply_markup=not_sub())
        await callback_query.message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@user_router.message(Command('start'))
async def cmd_start(message: types.Message, bot: Bot):
    if message.chat.type == 'private':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º, –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫
        is_new_user = await db.add_user_if_not_exists(message.from_user.id)

        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        language_code = message.from_user.language_code

        if is_new_user:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            info_text = f"<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>\n\n"
            info_text += f"User ID: {user_id}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: <a href='tg://user?id={user_id}'>{first_name}</a>\n"
            info_text += f"Username: @{username}\n" if username else "No username\n"
            info_text += f"First Name: {first_name}\n"
            info_text += f"Last Name: {last_name}\n" if last_name else "No last name\n"
            info_text += f"Language Code: {language_code}\n" if language_code else "No language code\n"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–∞–Ω–∞–ª
            await bot.send_message(CHANNEL_ID, info_text)

    if await check_sub_channels(channels, message.from_user.id, bot):

        # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=user_menu)

    else:
        await bot.send_message(message.from_user.id,
                               text="–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!",
                               parse_mode="html", reply_markup=not_sub())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è "–ü—Ä–æ –±–æ—Ç"
@user_router.message(lambda message: message.text == '–ü—Ä–æ –±–æ—Ç')
async def about_bot(message: types.Message, bot: Bot):
    if message.chat.type == 'private':

        if await check_sub_channels(channels, message.from_user.id, bot):

            await message.reply('–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞!')

        else:
            await bot.send_message(message.from_user.id,
                                   text="–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!",
                                   parse_mode="html", reply_markup=not_sub())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è "–ü—Ä–æ–≥—Ä–∞–º–º—ã"
@user_router.message(lambda message: message.text == '–ü—Ä–æ–≥—Ä–∞–º–º—ã')
async def menu_plugins(message: types.Message):
    if message.chat.type == 'private':
        await message.reply('–ú–µ–Ω—é ¬´–ü—Ä–æ–≥—Ä–∞–º–º—ã¬ª:', reply_markup=soft_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è "–ü–ª–∞–≥–∏–Ω—ã"
@user_router.message(lambda message: message.text == '–ü–ª–∞–≥–∏–Ω—ã')
async def menu_plugins(message: types.Message):
    if message.chat.type == 'private':
        await message.reply('–ú–µ–Ω—é ¬´–ü–ª–∞–≥–∏–Ω—ã¬ª:', reply_markup=soft_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô"
@user_router.message(lambda message: message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô')
async def menu_plugins(message: types.Message):
    if message.chat.type == 'private':
        await message.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª:', reply_markup=user_menu)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ "cancel"
@user_router.callback_query(lambda c: c.data == 'cancel')
async def cancel(callback_query: types.CallbackQuery, bot: Bot):
    await callback_query.message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è "–ú–æ–π –±–∞–ª–∞–Ω—Å"
@user_router.message(lambda message: message.text == '–ú–æ–π –±–∞–ª–∞–Ω—Å')
async def my_balance(message: types.Message):
    if message.chat.type == 'private':
        user_id = message.from_user.id
        balance = await db.get_user_balance(user_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        formatted_balance = f"{balance:.2f}"

        first_name = message.from_user.first_name

        # –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–Ω–æ–ø–∫–æ–π "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"
        await message.reply(
            f"–ò–º—è: <a href='tg://user?id={user_id}'>{first_name}</a>\nID: {user_id}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {formatted_balance} USDT.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å üí∞", callback_data="topup")],
                ]
            ))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ "topup"
@user_router.callback_query(lambda c: c.data == 'topup')
async def topup(callback_query: types.CallbackQuery, bot: Bot):
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è USDT:",
                           reply_markup=InlineKeyboardMarkup(
                               inline_keyboard=[
                                   [InlineKeyboardButton(text="ERC-20 (Ethereum)", callback_data="topup_erc20")],
                                   [InlineKeyboardButton(text="BEP-20 (Binance Smart Chain)",
                                                         callback_data="topup_bep20")],
                                   [InlineKeyboardButton(text="TRC-20 (Tron)", callback_data="topup_tron")],
                                   [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
                               ]
                           ))
    await callback_query.answer(text="", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
@user_router.callback_query(lambda c: c.data == 'topup_repeat')
async def topup(callback_query: types.CallbackQuery, bot: Bot):
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è USDT:",
                           reply_markup=InlineKeyboardMarkup(
                               inline_keyboard=[
                                   [InlineKeyboardButton(text="ERC-20 (Ethereum)", callback_data="topup_erc20")],
                                   [InlineKeyboardButton(text="BEP-20 (Binance Smart Chain)",
                                                         callback_data="topup_bep20")],
                                   [InlineKeyboardButton(text="TRC-20 (Tron)", callback_data="topup_tron")],
                                   [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
                               ]
                           ))
    await callback_query.message.delete()
    await callback_query.answer(text="", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ ERC-20 –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@user_router.callback_query(lambda c: c.data == 'topup_erc20')
async def topup_erc20(callback_query: types.CallbackQuery, bot: Bot):
    await bot.send_message(callback_query.from_user.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ç—å ERC-20 USDT?",
                           reply_markup=InlineKeyboardMarkup(
                               inline_keyboard=[
                                   [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="topup_confirm_erc20"),
                                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="topup_repeat")]
                               ]
                           ))
    await callback_query.message.delete()
    await callback_query.answer(text="", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ BEP-20 –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@user_router.callback_query(lambda c: c.data == 'topup_bep20')
async def topup_bep20(callback_query: types.CallbackQuery, bot: Bot):
    await bot.send_message(callback_query.from_user.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ç—å BEP20 USDT?",
                           reply_markup=InlineKeyboardMarkup(
                               inline_keyboard=[
                                   [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="topup_confirm_bep20"),
                                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="topup_repeat")]
                               ]
                           ))
    await callback_query.message.delete()
    await callback_query.answer(text="", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ TRON –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@user_router.callback_query(lambda c: c.data == 'topup_tron')
async def topup_tron(callback_query: types.CallbackQuery, bot: Bot):
    await bot.send_message(callback_query.from_user.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ç—å TRON USDT?",
                           reply_markup=InlineKeyboardMarkup(
                               inline_keyboard=[
                                   [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="topup_confirm_tron"),
                                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="topup_repeat")]
                               ]
                           ))
    await callback_query.message.delete()
    await callback_query.answer(text="", show_alert=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–¥–µ—Ä–µ
def order_info_message(order_id, amount, wallet_address, network):
    order_info = f"""
üìù <b>–û—Ä–¥–µ—Ä #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>

<b>–°—É–º–º–∞:</b> <code>{amount}</code> USDT
<b>–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å–µ—Ç—å:</b> {network}
<b>–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> <code>{wallet_address}</code>
<b>–í—Ä–µ–º—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> 15 –º–∏–Ω—É—Ç

‚ùóÔ∏è–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ <b>USDT –≤ —Å–µ—Ç–∏ {network} —Å—Ç—Ä–æ–≥–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ,</b> –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —É—Ç–µ—Ä—è–Ω—ã!
    """
    return order_info


def order_info_message_to_admin(order_id, amount, wallet_address, network, user_id):
    order_info = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä <code>{order_id}</code>!

<b>–°—É–º–º–∞:</b> {amount} USDT
<b>–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å–µ—Ç—å:</b> {network}
<b>–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> <code>{wallet_address}</code>

–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: <code>/complete {order_id}</code>.
    """
    return order_info


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
async def check_order_status(bot: Bot, user_id: int, order_id: str, message_id: int):
    await asyncio.sleep(900)  # 15 –º–∏–Ω—É—Ç —ç—Ç–æ 900 —Å–µ–∫—É–Ω–¥
    order = await db.get_order_by_id(order_id)
    if order and order['status'] != 'completed':  # or 'canceled'
        await db.cancel_order(order_id)
        await bot.send_message(user_id,
                               f"‚ùóÔ∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í–∞—à –æ—Ä–¥–µ—Ä #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: –≤—Ä–µ–º—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—à–ª–æ.",
                               parse_mode="HTML")  # , reply_to_message_id=message_id
        await bot.send_message(CHANNEL_ID,
                               f"–û—Ä–¥–µ—Ä <code>{order_id}</code> –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: –≤—Ä–µ–º—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—à–ª–æ.",
                               parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@user_router.callback_query(lambda c: c.data in ['topup_confirm_erc20', 'topup_confirm_bep20', 'topup_confirm_tron'])
async def topup_confirm(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å —Ç–∏–ø–æ–º –∫–æ—à–µ–ª—å–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    await state.update_data(wallet_type=callback_query.data)
    await callback_query.message.delete()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
    )
    msg = await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω 10 USDT, –º–∞–∫—Å 5000 USDT):",
                                              reply_markup=keyboard)
    await state.update_data(last_message_id=msg.message_id)
    await state.set_state(TopupStates.waiting_for_amount)


@user_router.message(TopupStates.waiting_for_amount)
async def process_topup_amount(message: types.Message, state: FSMContext, bot: Bot):
    global wallet_address, network
    user_id = message.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        amount = float(message.text)
        if amount < 10 or amount > 5000:
            raise ValueError

        order_id = generate_order_id()
        amount_with_random_digits = round(amount + random.uniform(0, 0.9999), 4)
        data = await state.get_data()
        wallet_type = data.get('wallet_type')

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –∏ —Å–µ—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        if wallet_type == 'topup_confirm_erc20':
            wallet_address = ERC20_WALLET
            network = 'ERC20'
        elif wallet_type == 'topup_confirm_bep20':
            wallet_address = BEP20_WALLET
            network = 'BEP20'
        elif wallet_type == 'topup_confirm_tron':
            wallet_address = TRON_WALLET
            network = 'TRON'

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.create_order(order_id, user_id, amount_with_random_digits)

        data = await state.get_data()
        last_message_id = data.get('last_message_id')

        if last_message_id:
            try:
                await bot.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω 10 USDT, –º–∞–∫—Å 5000 USDT):",
                                            chat_id=user_id, message_id=last_message_id)
            except Exception as e:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                print(f"{e}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ order_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(order_id=order_id)

        order_message = await bot.send_message(user_id,
                                               order_info_message(order_id, amount_with_random_digits, wallet_address,
                                                                  network))
        await bot.send_message(CHANNEL_ID,
                               order_info_message_to_admin(order_id, amount_with_random_digits, wallet_address, network,
                                                           user_id))

        await state.clear()

        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
        await asyncio.create_task(check_order_status(bot, user_id, order_id, order_message.message_id))

    except ValueError:
        data = await state.get_data()
        last_message_id = data.get('last_message_id')

        if last_message_id:
            try:
                await bot.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω 10 USDT, –º–∞–∫—Å 5000 USDT):",
                                            chat_id=user_id, message_id=last_message_id)

            except Exception as e:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                print(f"{e}")

        await message.answer(
            "‚ùóÔ∏è <b>–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É, (–º–∏–Ω 10 USDT, –º–∞–∫—Å 5000 USDT).",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data="topup_repeat")]
                ]
            ))
        await state.clear()
