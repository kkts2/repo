import os
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from config import ADMIN_USER_ID
import database as db

admin_router = Router()


class AdminStates(StatesGroup):
    waiting_for_broadcast_message = State()
    waiting_for_confirmation = State()
    waiting_for_button = State()
    waiting_for_user_count = State()


@admin_router.message(lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üì§' and message.from_user.id == ADMIN_USER_ID)
async def send_broadcast_prompt(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
        await state.set_state(AdminStates.waiting_for_broadcast_message)


@admin_router.message(AdminStates.waiting_for_broadcast_message)
async def handle_broadcast_message(broadcast_message: types.Message, state: FSMContext):
    if broadcast_message.from_user.id == ADMIN_USER_ID:
        await state.update_data(broadcast_message=broadcast_message.html_text, keyboard=None)

        total_users, inactive_users = await db.get_user_statistics()
        active_users = total_users - inactive_users

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"–í—Å–µ ({total_users})", callback_data=f"send_to_all_{total_users}"),
                 InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel")],
            ]
        )

        await broadcast_message.reply(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_users}, –≤—Å–µ–≥–æ: {total_users}):",
            reply_markup=keyboard
        )
        await state.set_state(AdminStates.waiting_for_user_count)
    else:
        await broadcast_message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')


@admin_router.message(AdminStates.waiting_for_user_count)
async def handle_user_count_message(user_count_message: types.Message, state: FSMContext):
    if user_count_message.from_user.id == ADMIN_USER_ID:
        try:
            user_count = int(user_count_message.text)
            await state.update_data(user_count=user_count)

            data = await state.get_data()
            broadcast_message = data.get('broadcast_message')

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úîÔ∏è", callback_data="confirm"),
                     InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel")],
                    [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É ‚ûï", callback_data="add_button")]
                ]
            )

            await user_count_message.reply("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?", reply_markup=keyboard)
            await state.set_state(AdminStates.waiting_for_confirmation)
        except ValueError:
            await user_count_message.reply('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
    else:
        await user_count_message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')


@admin_router.callback_query(lambda c: c.data.startswith('confirm') or c.data.startswith('cancel') or c.data.startswith(
    'add_button') or c.data.startswith('send_to_all'))
async def process_callback_button(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):

    data = await state.get_data()
    broadcast_message = data.get('broadcast_message')
    keyboard = data.get('keyboard')

    if callback_query.data.startswith('confirm'):
        users = await db.get_all_users()
        user_count = data.get('user_count')
        successful_count = 0
        failed_count = 0
        sent_users = []

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–∂–∏–º–∫–∏
        delivery_status = {}

        for user in users[:user_count]:
            try:
                await bot.send_message(user[0], broadcast_message, reply_markup=keyboard)
                await db.reset_failed_send(user[0])
                successful_count += 1
                sent_users.append(user[0])
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤ –≤—ã–∂–∏–º–∫—É
                delivery_status[user[0]] = "Delivered"
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
                await db.increment_failed_send(user[0])
                failed_count += 1
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ –≤ –≤—ã–∂–∏–º–∫—É
                delivery_status[user[0]] = "Not delivered"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        await bot.send_message(callback_query.from_user.id, f'<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\nC–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_count}\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {failed_count}')

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –≤—ã–∂–∏–º–∫–æ–π
        stats_filename = 'stats.txt'
        with open(stats_filename, 'w') as file:
            file.write(f'Successful: {successful_count}\n')
            file.write(f'Failed: {failed_count}\n')
            file.write('Sent to users:\n')
            for index, (user_id, status) in enumerate(delivery_status.items(), start=1):
                file.write(f'{index}. User ID: {user_id}, Status: {status}\n')

        keyboard_stats = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üíæ", callback_data="download_stats")],
            ]
        )
        await bot.send_message(callback_query.from_user.id, '<b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞, –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏?</b>', parse_mode="html", reply_markup=keyboard_stats)

        await state.clear()
    elif callback_query.data.startswith('cancel'):
        await callback_query.answer(text="–£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ!", show_alert=True)
        await state.clear()
    elif callback_query.data.startswith('add_button'):
        await bot.send_message(callback_query.from_user.id,
                               '–í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–Ω–∞–∑–≤–∞–Ω–∏–µ - —Å—Å—ã–ª–∫–∞", –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ:')
        await state.set_state(AdminStates.waiting_for_button)
    elif callback_query.data.startswith('send_to_all'):
        user_count = int(callback_query.data.split('_')[-1])
        await state.update_data(user_count=user_count)

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm"),
                 InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel")],
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É ‚ûï", callback_data="add_button")]
            ]
        )

        await bot.send_message(callback_query.from_user.id, "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?", reply_markup=keyboard)
        await state.set_state(AdminStates.waiting_for_confirmation)

    await callback_query.message.delete()


@admin_router.message(AdminStates.waiting_for_button)
async def handle_button_message(button_message: types.Message, state: FSMContext, bot: Bot):
    if button_message.from_user.id == ADMIN_USER_ID:
        try:
            data = await state.get_data()
            broadcast_message = data.get('broadcast_message')
            existing_keyboard = data.get('keyboard')

            buttons = []
            for line in button_message.text.strip().split('\n'):
                title, url = line.split(' - ', 1)
                buttons.append(InlineKeyboardButton(text=title, url=url))

            if existing_keyboard:
                existing_keyboard.inline_keyboard.append(buttons)
                keyboard = existing_keyboard
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

            await state.update_data(keyboard=keyboard)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await bot.send_message(button_message.from_user.id, broadcast_message, reply_markup=keyboard)

            keyboard_confirmation = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm"),
                     InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel")],
                    [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É ‚ûï", callback_data="add_button")]
                ]
            )

            await bot.send_message(button_message.from_user.id, "–ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?",
                                   reply_markup=keyboard_confirmation)
            await state.set_state(AdminStates.waiting_for_confirmation)
        except ValueError:
            await bot.send_message(button_message.from_user.id,
                                   '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
    else:
        await button_message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')


@admin_router.callback_query(lambda c: c.data == 'download_stats')
async def handle_download_stats(callback_query: types.CallbackQuery, bot: Bot):
    stats_filename = 'stats.txt'
    await bot.answer_callback_query(callback_query.id, text="", show_alert=True)

    if os.path.isfile(stats_filename):
        await bot.send_document(callback_query.from_user.id, FSInputFile(stats_filename))
        os.remove(stats_filename)
    else:
        await bot.answer_callback_query(callback_query.id, text="‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω!", show_alert=True)


@admin_router.message(lambda message: message.text == '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üìä' and message.from_user.id == ADMIN_USER_ID)
async def cmd_stat(message: types.Message):
    if message.chat.type == 'private':

        if message.from_user.id == ADMIN_USER_ID:

            total_users, inactive_users = await db.get_user_statistics()
            active_users = total_users - inactive_users

            await message.reply(
                f'<b>–¢–µ–∫—É—â–∞—è, –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É:</b>\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n–ò–∑ –Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n–ò–∑ –Ω–∏—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {inactive_users}',
                parse_mode="html")
        else:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')


@admin_router.message(Command('admin'))
async def cmd_admin(message: types.Message):
    if message.chat.type == 'private':

        if message.from_user.id == ADMIN_USER_ID:
            await message.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!', reply_markup=admin_menu)
            #   await message.answer_sticker(sticker="CAACAgIAAxkBAVmXumZORG9sI1OsnMN_K5-EXdOywuxmAAIYFAACTnNgSphCYN5qYn20NQQ")
        else:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.')


@admin_router.message(Command('complete'))
async def complete_order(message: types.Message, bot: Bot, state: FSMContext):
    if message.chat.type == 'private':

        if message.from_user.id == ADMIN_USER_ID:
            order_id = message.text.split()[1]
            order = await db.get_order_by_id(order_id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è get_order_by_id –≤ —Ç–æ–º –∂–µ –º–æ–¥—É–ª–µ

            if order and order['status'] == 'pending':  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ order - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                await db.complete_order(order_id)
                await db.update_user_balance(order['user_id'], order['amount'])
                await message.reply("–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
                await bot.send_message(order['user_id'], f"–í–∞—à –æ—Ä–¥–µ—Ä #{order_id} –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!")
                await state.clear()
            else:
                await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –æ—Ä–¥–µ—Ä.")
        else:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_menu = types.ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É üìä")],
        [types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üì§")],
    ]
)
