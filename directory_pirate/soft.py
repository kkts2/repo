from aiogram import Router, types, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import database as db
from directory_pirate.config import STOCK_CHANNEL_ID

soft_router = Router()

# –æ—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. <a href="https://www.adobe.com/ru/">–Ω–∞ —Å–∞–π—Ç–µ Adobe</a> \\ –≠—Ç–æ –Ω–µ –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏ ‚Äî –º—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –∏ –≤–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è! –ü–ª–∞—Ç–µ–∂ –∏–¥–µ—Ç –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∏ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ–±–µ—â–∞–Ω–Ω—É—é –ø–æ–º–æ—â—å –æ—Ç –Ω–µ–≥–æ!

alert_msg = """ 
\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è –ø–æ–∫—É–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç–µ —Ç–æ–≤–∞—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è, –ø–æ–∫—É–ø–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã! 
"""

# photoshop

description_p = """
<b>–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Adobe Photoshop 2024 –≥. (–≤–µ—Ä—Å–∏—è 25.9) | #—Ä–µ–ø–∞–∫_–æ—Ç_–∫—Ä–æ–ª–∏–∫–∞.</b>

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:</b> .exe 3366.2MB –¥–ª—è Windows 64bit.

–í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Adobe Photoshop v25.9.0.573, <a href="https://helpx.adobe.com/ru/photoshop/using/whats-new/2024-4.html#adjustment-brush-tool">—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é</a>. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ¬´–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∞—è –∫–∏—Å—Ç—å¬ª —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

üí∞<b>–¶–µ–Ω–∞:</b> 10 USDT ‚Äì –Ω–∞–≤—Å–µ–≥–¥–∞, —Å –ø—Ä–∏–ª–∞–≥–∞–µ–º–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ.
"""


@soft_router.message(lambda message: message.text == 'Adobe Photoshop (2024 –≥.)')
async def buy_orchid(message: types.Message):
    if message.chat.type == 'private':
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å üí∞", callback_data="buy_orchid_confirm")],
            ]
        )
        await message.reply(description_p, parse_mode="HTML", reply_markup=keyboard)


@soft_router.callback_query(lambda c: c.data == 'buy_orchid_confirm')
async def confirm_buy_orchid(callback_query: types.CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id
    balance = await db.get_user_balance(user_id)

    if balance < 10:
        await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
    else:
        await bot.send_message(user_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Adobe Photoshop 2024 –≥. (–≤–µ—Ä—Å–∏—è 25.9)?" + alert_msg, parse_mode="HTML",
                               reply_markup=InlineKeyboardMarkup(
                                   inline_keyboard=[
                                       [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                                             callback_data="buy_orchid_final_confirm"),
                                        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")],
                                   ]
                               ))

    await callback_query.answer(text="", show_alert=True)


@soft_router.callback_query(lambda c: c.data == 'buy_orchid_final_confirm')
async def final_confirm_buy_orchid(callback_query: types.CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id
    balance = await db.get_user_balance(user_id)

    if balance < 10:
        await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å.")
    else:

        await db.update_user_balance(user_id, -10)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
        try:
            await bot.forward_message(chat_id=user_id, from_chat_id=STOCK_CHANNEL_ID, message_id=10)
            await callback_query.message.delete()
        except Exception as e:
            await callback_query.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

        await bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â—ë!")

    await callback_query.answer(text="", show_alert=True)


# photoshop

description_a = """
<b>–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Adobe Photoshop 2024 –≥. (–≤–µ—Ä—Å–∏—è 25.9) | #—Ä–µ–ø–∞–∫_–æ—Ç_–∫—Ä–æ–ª–∏–∫–∞.</b>

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:</b> .exe 3366.2MB –¥–ª—è Windows 64bit.

–í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Adobe Photoshop v25.9.0.573, <a href="https://helpx.adobe.com/ru/photoshop/using/whats-new/2024-4.html#adjustment-brush-tool">—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å—é</a>. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ¬´–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∞—è –∫–∏—Å—Ç—å¬ª —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

üí∞<b>–¶–µ–Ω–∞:</b> 10 USDT ‚Äì –Ω–∞–≤—Å–µ–≥–¥–∞, —Å –ø—Ä–∏–ª–∞–≥–∞–µ–º–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ.
"""


@soft_router.message(lambda message: message.text == 'Adobe AfterEffects (2024 –≥.)')
async def buy_orchid(message: types.Message):
    if message.chat.type == 'private':
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å üí∞", callback_data="buy_orchid_confirm_a")],
            ]
        )
        await message.reply(description_a, parse_mode="HTML", reply_markup=keyboard)


@soft_router.callback_query(lambda c: c.data == 'buy_orchid_confirm_a')
async def confirm_buy_orchid(callback_query: types.CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id
    balance = await db.get_user_balance(user_id)

    if balance < 10:
        await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
    else:
        await bot.send_message(user_id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Adobe Photoshop 2024 –≥. (–≤–µ—Ä—Å–∏—è 25.9)?",
                               reply_markup=InlineKeyboardMarkup(
                                   inline_keyboard=[
                                       [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                                             callback_data="buy_orchid_final_confirm_a"),
                                        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")],
                                   ]
                               ))

    await callback_query.answer(text="", show_alert=True)


@soft_router.callback_query(lambda c: c.data == 'buy_orchid_final_confirm_a')
async def final_confirm_buy_orchid(callback_query: types.CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id
    balance = await db.get_user_balance(user_id)

    if balance < 10:
        await bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å.")
    else:

        await db.update_user_balance(user_id, -10)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
        try:
            await bot.forward_message(chat_id=user_id, from_chat_id=STOCK_CHANNEL_ID, message_id=10)
            await callback_query.message.delete()
        except Exception as e:
            await callback_query.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

        await bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –£–¥–∞—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â—ë!")

    await callback_query.answer(text="", show_alert=True)


# –æ—Å—Ç–∞–ª—å–Ω–æ–µ
@soft_router.callback_query(lambda c: c.data == 'cancel')
async def cancel(callback_query: types.CallbackQuery, bot: Bot):
    await callback_query.message.delete()

